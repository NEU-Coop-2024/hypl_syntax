'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var codemirror = require('codemirror');
var lr = require('@lezer/lr');
var language = require('@codemirror/language');

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = lr.LRParser.deserialize({
  version: 14,
  states: "!QOQOPOOOVOPO'#C^QOOOOOO[OPO,58xOaOPO1G.dOfOPO7+$OOkOPO<<GjOOOOAN=UAN=U",
  stateData: "p~ORPO~OVRO~OSSO~OWTO~OTUO~OWVO~O",
  goto: "VRPPSRQO",
  nodeNames: "âš  Hypl Expression LParen RParen Arrow",
  maxTerm: 8,
  skippedNodes: [0],
  repeatNodeCount: 0,
  tokenData: "!k~RTxybyzg!^!_l!c!}w#T#o!Y~gOR~~lOS~~oP}!Or~wOT~~|SW~!Q![w!c!}w#R#Sw#T#ow~!_SV~!Q![!Y!c!}!Y#R#S!Y#T#o!Y",
  tokenizers: [0],
  topRules: {"Hypl":[0,1]},
  tokenPrec: 0
});

const HyplLanguage = language.LRLanguage.define({
    parser: parser.configure({
        props: [
            language.indentNodeProp.add({
                Application: language.delimitedIndent({ closing: ")", align: false }),
            }),
            language.foldNodeProp.add({
                Application: language.foldInside,
            }),
        ],
    }),
    languageData: {
        commentTokens: { line: ";" },
    },
});
const test = "TESTING";
function Hypl() {
    return new language.LanguageSupport(HyplLanguage);
}
const initialText = '(popid) Varid <- Varid';
const targetElement = document.querySelector('#editor');
new codemirror.EditorView({
    doc: initialText,
    extensions: [
        codemirror.minimalSetup,
        Hypl(),
    ],
    parent: targetElement,
});

exports.Hypl = Hypl;
exports.HyplLanguage = HyplLanguage;
exports.test = test;
