'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var codemirror = require('codemirror');
var lr = require('@lezer/lr');
var language = require('@codemirror/language');
var highlight = require('@lezer/highlight');

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = lr.LRParser.deserialize({
  version: 14,
  states: "!WQQOPOOO`OPO'#CaOOOO'#Cd'#CdOOOO'#Cb'#CbQQOPOOOOOO,58{,58{OqOPO,58{OOOO-E6`-E6`OOOO1G.g1G.g",
  stateData: "!S~OQQORQOSQOYPO~OQQORQOSQOXTOYPO~OQQORQOSQOXWOYPO~O",
  goto: "pXPPPPPY`PjXQOPSUQSOQUPTVSUXROPSU",
  nodeNames: "âš  Program Identifier Name Number Application",
  maxTerm: 10,
  skippedNodes: [0],
  repeatNodeCount: 1,
  tokenData: "!e~RTxybyzg!Q![l!c!}q#T#o!S~gOY~~lOX~~qOS~~vSR~!Q![q!c!}q#R#Sq#T#oq~!XSQ~!Q![!S!c!}!S#R#S!S#T#o!S",
  tokenizers: [0],
  topRules: {"Program":[0,1]},
  tokenPrec: 0
});

const hyplHighlight = highlight.styleTags({
    Identifier: highlight.tags.variableName,
    Name: highlight.tags.name,
    Number: highlight.tags.number,
    "( )": highlight.tags.paren
});
const hyplHighlightStyle = language.HighlightStyle.define([
    { tag: highlight.tags.variableName, color: "#2689C7" },
    { tag: highlight.tags.name, color: "#d90cfe" },
    { tag: highlight.tags.number, color: "#91041e" },
]);

const HyplLanguage = language.LRLanguage.define({
    parser: parser.configure({
        props: [
            language.indentNodeProp.add({
                Application: language.delimitedIndent({ closing: ")", align: false }),
            }),
            language.foldNodeProp.add({
                Application: language.foldInside,
            }),
            hyplHighlight,
        ],
    }),
    languageData: {
        commentTokens: { line: ";" },
    },
});
function Hypl() {
    return new language.LanguageSupport(HyplLanguage, language.syntaxHighlighting(hyplHighlightStyle));
}
const initialText = '(popid) Varid <- Varid';
const targetElements = document.querySelector('.hypl');
new codemirror.EditorView({
    doc: initialText,
    extensions: [
        codemirror.minimalSetup,
        Hypl(),
    ],
    parent: targetElements,
});

exports.Hypl = Hypl;
exports.HyplLanguage = HyplLanguage;
